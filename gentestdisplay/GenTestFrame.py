# -*- coding: UTF-8 -*-
#
# generated by wxGlade 1.0.1 on Fri Mar 19 10:57:37 2021
#

import wx
# begin wxGlade: dependencies
# end wxGlade

# begin wxGlade: extracode
# end wxGlade


from queue import Queue
from LabJackHandler import *
from PlotGraph import *
import time
import math
import numpy as np

class GenLoggerFrame(wx.Frame):
    __CHANNELS          = [ "AIN0", "AIN1" ]
    # __FREQ_LIMIT        = 3000.0
    __FREQ_LIMIT        = 600.0
    # __FREQ_LIMIT        = 300.0
    __SCAN_RATE         = 2*__FREQ_LIMIT   # Resolve up to 300Hz
    __NUM_CHANNELS      = len(__CHANNELS)

    def __init__(self, *args, **kwds):
<161731904815619685399541wxGlade replace GenLoggerFrame __init__>
        self.__labjack_port = None
        self.__labjack = None
        self.__plotitems = []
        self.__packet_thread_id = None
        self.__queue = Queue()
        self.__log_file = None
        self.__playback_file = None
        self.__playback_thread = None

        wx.CallLater(2000, self.OnRefreshPortsHelper)

        # Create FFT views
        phase_fft = PlotGraph(parent=self.mainPanel, name="Freq FFT", style=0)
        phase_fft.SetParams({
            "plottype": "fft",
            "points": self.__SCAN_RATE,
            "xmin": 0,
            "xmax": self.__FREQ_LIMIT,
            "ymin": -20,
            "ymax": 80,
            "yconvert": lambda y: 10*math.log10(y) if y != 0 else 0,
            "zero": 1,
            "results":  "thd",  # Return THD from each fft SetValue
        })

        phase_fft.SetChannelColor("AIN0", wx.RED)
        phase_fft.SetChannelColor("AIN1", wx.BLUE)

        self.__plotitems.append(phase_fft)

        self.frequencySizer.Detach(self.dummyFrequencyPanel)
        self.frequencySizer.Add(phase_fft, proportion=1, border=0, flag=wx.EXPAND)

        # Create freq plot
        freq_plot = PlotGraph(parent=self.mainPanel, name="Frequency", style=0)
        freq_plot.SetParams({
            "points": self.__FREQ_LIMIT,
            "xmin": 0,
            "xmax": self.__FREQ_LIMIT,
            "ymin": -20,
            "ymax": 20,
            "xlabelfun": lambda x: "%.2f" % (x/self.__SCAN_RATE),
        })

        freq_plot.SetChannelColor("AIN0", wx.RED)
        freq_plot.SetChannelColor("AIN1", wx.BLUE)

        self.__plotitems.append(freq_plot)

        self.graphSizer.Detach(self.dummyGraphPanel)
        self.graphSizer.Add(freq_plot, proportion=1, border=0, flag=wx.EXPAND)

    def OnRefreshPorts(self, event):  # wxGlade: GenLoggerFrame.<event_handler>
        self.OnRefreshPortsHelper()
        event.Skip()

    def OnRefreshPortsHelper(self):
        busy = wx.BusyCursor()

        self.portCombo.Clear()
        item = 0
        labjacks = GetLabJackHandler().AvailableDevices(force=True)
        for sn in labjacks:
            for connection in labjacks[sn]['connections']:
                self.portCombo.Insert("%s:%s" % (sn, connection), item)

        if self.portCombo.GetSelection() == wx.NOT_FOUND and self.portCombo.GetCount() != 0:
            self.portCombo.SetValue(self.portCombo.GetString(0))

        del busy

    def OnSelectLabjackCombo(self, event):  # wxGlade: GenLoggerFrame.<event_handler>
        event.Skip()

    def OnStartButton(self, event):  # wxGlade: GenLoggerFrame.<event_handler>
        selected = self.portCombo.GetValue()

        if selected is not None:
            sn, connection = selected.split(':')

            self.__labjack = GetLabJackHandler().Open(sn, connection=connection)
            self.__data = {}

            # Start the collector
            rc = self.__labjack.StreamStart(channels=self.__CHANNELS, scan_rate=self.__SCAN_RATE, scans_per_read=int(self.__SCAN_RATE/self.__NUM_CHANNELS), callback=self.__capture_data)
            # print("StreamStart returned %d" % rc)

            if rc != 0:
                self.__packet_thread_id = Thread(target=self.__packet_thread)
                self.__packet_thread_id.start()
            else:
                wx.MessageBox(u"Unable to start packet thread", u"Packet Thread")

        event.Skip()

    def __capture_data(self, handle, data):
        self.__queue.put(data)

    def __update_fft_with_thd(self, value, channel_name):
        # print("__update_thd_with_thd: channel_name %s value %s" % (channel_name, value))
        results = self.__plotitems[0].SetValue(value, channel=channel_name)
        # print("__update_fft_with_thd returned results %s" % results)
        if "thd" in results:
            if channel_name == "AIN0":
                self.frequencyTHDtext1.SetValue("%.1f" % results["thd"])
            else:
                self.frequencyTHDtext2.SetValue("%.1f" % results["thd"])


    # This receives the data packets from the LabJack Streams
    def __packet_thread(self):
        running = True
        while running:
            packet = self.__queue.get()
            # print("__packet_thread: %s" % str(packet))
            if packet is None:
                # All done - shut down
                running = False

            else:
                # print(".", end='', flush=True)

                data = packet[0]

                data0 = [ data[n] for n in range(0, len(data), 2) ]
                data1 = [ data[n] for n in range(1, len(data), 2) ]

                # Send the two channels to the plots
                if self.enableFFTCheckbox1.IsChecked():
                    wx.CallAfter(self.__update_fft_with_thd, value=data0, channel_name="AIN0")

                if self.enableFFTCheckbox2.IsChecked():
                    wx.CallAfter(self.__update_fft_with_thd, value=data1, channel_name="AIN1")

                if self.enableGraphCheckbox1.IsChecked():
                    wx.CallAfter(self.__plotitems[1].SetValue, data0, channel="AIN0")

                if self.enableGraphCheckbox2.IsChecked():
                    wx.CallAfter(self.__plotitems[1].SetValue, data1, channel="AIN1")

                # Send data to log file if requested
                if self.__log_file is not None:
                    for index in range(0, len(data), 2):
                        self.__log_file.write("%.4f,%.4f\n" % (data[index], data[index+1]))

    def OnStopButton(self, event):  # wxGlade: GenLoggerFrame.<event_handler>
        self.StopCapture()
        event.Skip()

    def StopCapture(self):
        if self.__labjack is not None and self.__packet_thread_id is not None:
            self.__labjack.StreamStop()
            self.__packet_thread_id.join()
            self.__packet_thread_id = None

    def OnExitButton(self, event):  # wxGlade: GenLoggerFrame.<event_handler>
        self.CloseLogger()
        wx.Exit()
        event.Skip()

    def CloseLogger(self):
        # print("CloseLogger...")
        self.StopCapture()

        for plotitem in self.__plotitems:
            plotitem.Stop()

        if self.__labjack != None:
            self.__labjack.Close()
            self.__labjack = None

    def OnClose(self, event):  # wxGlade: GenLoggerFrame.<event_handler>
        self.CloseLogger()
        event.Skip()

    def OnFFTCheckbox1(self, event):  # wxGlade: GenLoggerFrame.<event_handler>
        self.__plotitems[0].DeleteChannel(self.__CHANNELS[0])
        self.frequencyTHDtext1.Clear()
        event.Skip()

    def OnFFTCheckbox2(self, event):  # wxGlade: GenLoggerFrame.<event_handler>
        self.__plotitems[0].DeleteChannel(self.__CHANNELS[1])
        self.frequencyTHDtext2.Clear()
        event.Skip()

    def OnGraphCheckbox1(self, event):  # wxGlade: GenLoggerFrame.<event_handler>
        self.__plotitems[1].DeleteChannel(self.__CHANNELS[0])
        event.Skip()

    def OnGraphCheckbox2(self, event):  # wxGlade: GenLoggerFrame.<event_handler>
        self.__plotitems[1].DeleteChannel(self.__CHANNELS[1])
        event.Skip()

    def OnStartLogButton(self, event):  # wxGlade: GenLoggerFrame.<event_handler>
        if self.__log_file is not None:
            with wx.MessageDialog(self, u"Already Logging.  Replace current log file?", caption=u"Close Current Log File", style=wx.CENTER | wx.YES | wx.CANCEL) as question:
                if question.showModal() == wx.ID_YES:
                    self.__log_file.close()
                    self.__log_file = None

        if self.__log_file == None:
            with wx.FileDialog(self, "Create log file", wildcard="LOG files (*.log)|*.log",
                           style=wx.FD_SAVE | wx.FD_OVERWRITE_PROMPT) as fileDialog:

                if fileDialog.ShowModal() != wx.ID_CANCEL:
                    # save the current contents in the file
                    pathname = fileDialog.GetPath()
                    try:
                        self.__log_file = open(pathname, "w+")
                        # Put date/time in comment
                        self.__log_file.write(u",,Info:SPS=%d CHANNELS=%d; Started:%s\n" % (self.__SCAN_RATE, 2, str(wx.DateTime.Now())))
                        self.loggingStatus.Show()
                        self.configSizer.Layout()

                    except IOError:
                        wx.LogError("Cannot log to file '%s'." % pathname)

        event.Skip()

    def __playback_data(self, samples_per_second):
        time_between_samples = 1.0/float(samples_per_second)

        running = True

        while running:
            data = []

            working = True

            while working and len(data) < 100:
                try:
                    chunk = self.__playback_file.readline().strip()
                    if len(chunk) == 0:
                        print("final was %d items" % len(chunk))
                        working = False
                    else:
                        data.extend(chunk.split(','))
                except:
                    working = False
                
            # print("data is %s" % data)

            if len(data) != 0:
                data = [[float(value) for value in data]]

                # print("__playback_data: %s" % data)

                # Write as list of floats
                self.__queue.put(data)

                # print("Sleeping %f seconds" % time_between_samples)

                time.sleep(time_between_samples * len(data[0]))
                # print("tick %d"  % len(data[0]))

            else:
                wx.CallAfter(self.StopPlayback)
                running = False

    def StartPlayback(self, pathname):
        try:
            file = open(pathname, "r")
            # Read first line to get info
            info = file.readline()
            starting = info.find("Info:")
            ending = info.find(";")

            if starting >= 0 and ending >= 0:
                items = info[starting+5:ending].strip().split(' ')
                samples_per_second = 0

                for item in items:
                    name, value = item.split('=')
                    if name == "SPS":
                        samples_per_second = int(value)

                if samples_per_second != 0:
                    # Start thread to process data
                    self.__packet_thread_id = Thread(target=self.__packet_thread)
                    self.__packet_thread_id.start()

                    # Set current playback file
                    self.__playback_file = file

                    # Start thread to read data and put in queue
                    self.__playback_thread = Thread(target=self.__playback_data, args=(samples_per_second,))
                    self.__playback_thread.start()

            self.playbackButton.SetLabel(u"Stop Playback")
            self.configSizer.Layout()

        except:
            wx.MessageBox(u"Unable to playback %s" % pathname, u"File Error")


    def StopPlayback(self):
        print("StopPlayback called")
        try:
            self.__playback_file.close()
            self.__playback_thread.join()

        except:
            pass

        self.playbackButton.SetLabel(u"Playback")
        self.configSizer.Layout()

        self.__playback_file = None

    def OnStopLogButton(self, event):  # wxGlade: GenLoggerFrame.<event_handler>
        if self.__log_file is not None:
            self.__log_file.close()
            self.__log_file = None
            self.loggingStatus.Hide()
            self.configSizer.Layout()

        event.Skip()

    def OnPlaybackButton(self, event):  # wxGlade: GenLoggerFrame.<event_handler>
        if self.__playback_file is not None:
            self.StopPlayback()
        else:
            with wx.FileDialog(self, "Playback log file", wildcard="LOG files (*.log)|*.log", style=wx.FD_OPEN) as fileDialog:
                if fileDialog.ShowModal() == wx.ID_OK: 
                    self.StartPlayback(fileDialog.GetPath())

        event.Skip()
<161731904815619685399541wxGlade event_handlers GenLoggerFrame># end of class GenLoggerFrame
